.TH "Vector" 3 "Fri Oct 6 2017" "Version 0.1" "Vector" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Vector \- A generic and dynamic container that expands automatically as elements are added\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <vector\&.h>\fP
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "int \fBlen\fP"
.br
.ti -1c
.RI "void * \fBdata\fP"
.br
.ti -1c
.RI "int \fBcapacity\fP"
.br
.ti -1c
.RI "size_t \fBele_size\fP"
.br
.ti -1c
.RI "int(* \fBcompar\fP )(const void *, const void *)"
.br
.ti -1c
.RI "void(* \fBDestroy\fP )(struct \fBVector\fP *v)"
.br
.ti -1c
.RI "void(* \fBDestroy_pointer\fP )(struct \fBVector\fP *v)"
.br
.in -1c
.SH "Detailed Description"
.PP 
A generic and dynamic container that expands automatically as elements are added\&. 

The library supports amortized constant time insertion and removal of elements , as well as constant time access\&.
.IP "\(bu" 2
The object provided by the \fBVector\fP library is an array type container that:
.IP "  1." 6
It only must contain addresses of HEAP\&. The insertion must be done by calling the Memory Manager, that is: any new insertion will have to be done with pointers to HEAP\&.
.IP "    2." 8
Resides in contiguous memory, accessible by arithmetic of pointers
.IP "    3." 8
It is generic: it supports any types: we identifie the information not by its type, but by its size
.IP "    4." 8
The object resides in HEAP
.IP "    5." 8
The object is self-expanding: doubles its capacity automatically if the insertion of a new element requires it
.IP "    6." 8
The library provides insertion of items from file\&.
.PP

.PP

.PP
.PP
.PP
.nf
          The insertion of elements is always by reference. If the item
          were created in main, (reside in STACK) the object pointed by
          our stored direction, is released when the application finishes.
          There is nothing to free.

          But if you create the element by calling the Memory Manager
          (calloc,  * malloc, ...) then the pointer resides in the HEAP, and
          must be released before application has finished.

         This means that either we create data that resides in STACK or
         we create it by calling the memory manager. If both forms
         are combined  then we release a STACK direction with the call
         to Destroy, and this will cause a segment violation, or any other
         undefined behavior. Or, if we do not call Destroy, we will leave
         pointers without releasing when our application has returned
         (memory - leak).

         If the insertion is made from function calls, you must only insert
         elements whose addresses reside in HEAP, since the space in
         the stack corresponding to the function is released once it
         returns.

         Well, our object only must contain addresses of HEAP.
         The insertion must be done  by calling the Memory Manager
         before. That is: any new insertion will have to be done with
         pointers to HEAP.

         The contract is:

         1. Only insert references to HEAP
         2. Who calls the Memory Manager, free the direction stored in
             the pointer.

         If we follow the rules, there will be no problem: neither
         memory leak, neither double free..fi
.PP
 
.SH "Member Data Documentation"
.PP 
.SS "int Vector::capacity"
Capacity, in number of elements\&. Capacity has to be greater than Zero 
.SS "int(* Vector::compar) (const void *, const void *)"
Comparing Function pointer 
.SS "void* Vector::data"
Array to hold the information 
.SS "void(* Vector::Destroy) (struct \fBVector\fP *v)"
Destructor 
.SS "void(* Vector::Destroy_pointer) (struct \fBVector\fP *v)"
Destructor to use with the function vector_Insert_from_file\&. It frees the pointers created and then it calls Destroy 
.SS "size_t Vector::ele_size"
\fBVector\fP's data type\&. It has to be the returned value of 'sizeof(\fBVector\fP's data type)'
.PP
The constructor requires that the client element size be identified up front\&.
.PP
Since it doesnâ€™t (and will never) know the true data type, it needs the size so it at least knows how many bytes to replicate behind the scenes with every call to manage data\&. 
.SS "int Vector::len"
Number of elements in \fBVector\fP object 

.SH "Author"
.PP 
Generated automatically by Doxygen for Vector from the source code\&.
